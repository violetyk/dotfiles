# プレフィックス {{{
set -g prefix C-t
unbind C-b
bind C-t send-prefix
# }}}

# セッションオプション set-option (set) {{{
# prefix :show-options -g で確認

# ウィンドウ番号を1から開始
set -g base-index 1

# マウスクリックでペイン選択しない
set -g mouse off

# セッションで作成される新しいウィンドウのデフォルトの端末。環境変数TERMのデフォルト値。通常"screen"
set -g default-terminal $TERM

# メッセージ表示時間(ミリ秒)
set -g display-time 2000

# バッファ上限数
set -g buffer-limit 32

# ESCキー押下時の遅延（ミリ秒）
set -g escape-time 0

# ビジュアルノーティフィケーション
set -g visual-activity on

# ウィンドウマネージャ向けのタイトル
set -g set-titles on
set -g set-titles-string ""

set -g default-shell $SHELL

set -g history-limit 10000

set -g renumber-windows on
# }}}

# ウィンドウオプション set-window-option (setw) {{{
# prefix :show-window-options -g で確認


# コピーモードのキーマップ。標準はemacs
setw -g mode-keys vi

# ウィンドウ名が自動的に更新されないようにする
setw -g automatic-rename off

# カレントではないウィンドウに変化があったときの通知をしない
setw -g monitor-activity off

# ペインの番号を1から開始
setw -g pane-base-index 1

setw -g wrap-search on
setw -g xterm-keys on
# }}}

# キーバインド bind-key (bind) / unbind-key (unbind) {{{
# prefix :list-keys で確認
#   CtrlとAltが使える
#     Ctrl : C-または^
#     Alt  : M-
#   -rは連続で入力可能にする
#   -nはプレフィックスキーをおさなくても動作するようになる

## 設定ファイルを再読込する
unbind r
bind r source-file ~/.tmux.conf\; display-message "[tmux] $HOME/.tmux.conf reloaded."

# prefix + C-c で新規ウィンドウ作成
bind C-c new-window

# prefix + Space でウィンドウ一覧選択を表示
bind Space choose-window

# prefix + C-f でウィンドウ検索
bind C-f command-prompt -p "find-window:" "find-window %%"

# 新しいSSH接続を名前をつけたウィンドウで作成する。
# unbind s
# bind-key s command-prompt -p "ssh new-window" "new-window -n %1 'ssh -t %1'"
# bind-key C-s command-prompt -p "ssh vertical-split" "split-window -h 'ssh -t %1'"
# bind-key S command-prompt -p "ssh horizontal-split" "split-window 'ssh -t %1'"

# tmuxは起動時に、環境変数をグローバル環境変数に格納する。
# かつ、セッションごとにも環境変数を持っている。
# なので新しいウインドウを作る時にグローバル環境変数をマージして子プロセスに渡す。
# prefixt :show-environment で確認可能。
set -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION"


# 直前にアクティブだったウィンドウへ
bind C-t last-window

# ペイン分割
unbind %
bind v split-window -h # 縦
unbind '"'
bind s split-window -v # 横

# ペイン終了
unbind !
bind q kill-pane

# 現在のペインを新しいウィンドウの単独ペインにする
bind b break-pane

# 現在のペインを別のウィンドウへ移動する
bind m command-prompt -p "move pane to:(window)" "join-pane -t:%1"

# 別ウィンドウのアクティブなペイン（もしくはウィンドウ番号.ペイン番号）を持ってくる
bind M command-prompt -p "join pane from: (window.pane)" "join-pane -s:%1"

# ペイン間の移動
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R

# ペインのサイズ変更
bind -r J resize-pane -D 3
bind -r K resize-pane -U 3
bind -r H resize-pane -L 3
bind -r L resize-pane -R 3


# 作業ログを取る
# bind-key H pipe-pane 'cat >> $HOME/.tmux/tmux-#W.log' \; display-message 'Started logging to $HOME/.tmux/tmux-#W.log'
# bind-key h pipe-pane \; display-message 'Ended logging to $HOME/.tmux/tmux-#W.log'

# }}}

# ステータスライン {{{

# ステータスラインを表示
set -g status on

# ステータス行更新間隔(1で毎秒更新・既定値15)
# set -g status-interval 2

# 行の書式
#    #(コマンド行)     コマンド出力の最初の行
#    #[属性]           色/属性の変更(例:#[fg=cyan,bright])
#    #H                ホスト名
#    #I                ウィンドウ番号
#    #P                ペイン番号
#    #S                セッション名
#    #T                ウィンドウタイトル
#    #W                ウィンドウ名
#    ##                「#」の文字
#
# コマンドは繰り返し実行される (更新頻度はstatus-intervalによる・既定値は15秒)
# 指定可能な色は
# black red green yellow blue magenta cyan white
# の他、256色パレット上のcolour0,colour1, ... colour255が利用可能
# 指定可能な属性は
#   bright(bold)[明るい(太字)], dim[暗い], underscore[下線], blink[点滅],
#   reverse[反転], hidden[非表示], italics[イタリック], default[書式のクリア]
#   (端末によっては効果がないものもある)
#
# 既定の属性
#   「xxx-fg」「xxx-bg」は色、「xxx-attr」は属性
#   透明にしたい場合、端末によっては
#   status-bgを「default」にすると256色パレット色の表示が部分的におかしくなる?
#   背景色は端末エミュレータの背景色に近いものを設定すると良いかも

# set -g status-fg    white
# set -g status-bg    colour235
# set -g status-attr-style  default
set -g status-style fg="white",bg="colour235","default"

# 左ステータスバー
# set -g status-left "#[fg=colour250, bg=colour239] S:#S W:#I P:#P #[fg=colour239, bg=colour235]⮀"
set -g status-left ""
set -g status-left-length 0

# 中央のウィンドウリスト
# setw -g window-status-current-format "#[fg=colour235, bg=colour28]⮀#[fg=colour255, bg=colour28] #I:#W #[fg=colour28, bg=colour235]⮀"
setw -g window-status-current-format "#{?client_prefix,#[reverse],}#[fg=colour235, bg=colour141]⮀#[fg=colour235, bg=colour141] #I.#P:#W #[fg=colour141, bg=colour235]"

# 右ステータスバー
# 日付/時刻部分はstrftime()と同様の書式
# set -g status-right "#[fg=colour235, bg=colour239]⮀#[fg=colour250, bg=colour239] %Y/%m/%d(%a)%H:%M"
# set -g status-right "#[fg=colour250, bg=colour239] #T #[fg=colour239, bg=colour235]⮀#[fg=colour235, bg=colour239]⮀#[fg=colour250, bg=colour239] %Y/%m/%d(%a)%H:%M"
set -g status-right "#[fg=colour235, bg=colour239]⮀#[fg=colour250, bg=colour239] #T"
set -g status-right-length 200

# メッセージ/プロンプト
set -g message-style fg="colour236",bg="colour247","default"

# スクロールの右上やコピーモード選択範囲のスタイル
setw -g mode-style fg="colour236",bg="colour247","default"
# }}}

#  vim: set et fenc=utf-8 ff=unix ft=conf sts=2 sw=2 ts=2 fdm=marker: 
